spring.application.name=ServiceRest
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/microservizi
spring.datasource.username=postgres
spring.datasource.password=root
server.port=9990

# Eureka Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.enabled=true

# Hibernate Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Resilience4j Configuration
resilience4j.retry.instances.cb-microservice.max-attempts=5
resilience4j.retry.instances.cb-microservice.wait-duration=5000
resilience4j.retry.instances.cb-microservice.enable-exponential-backoff=true

resilience4j.ratelimiter.instances.rl-microservice.limit-for-period= 2
resilience4j.ratelimiter.instances.rl-microservice.limit-refresh-period = 5s
resilience4j.ratelimiter.instances.rl-microservice.timeout-duration = 0
resilience4j.bulkhead.instances.bh-microservice.max-concurrent-calls = 2

# OpenTelemetry Configuration
management.tracing.sampling.probability=1.0
logging.level.io.opentelemetry=DEBUG
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
management.endpoints.web.exposure.include=health,info,prometheus

#kafka Configuration Producer
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=ms-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#kafka Configuration Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Config Server
spring.config.import=configserver: